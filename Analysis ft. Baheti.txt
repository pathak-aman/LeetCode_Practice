for (int j = 0; j < array.length; j++) {
            matchFound = False
			for (int k = 0; k < array.length; k++) {
				if (array[j] == array[k] && j != k) {
					matchFound = True
					break
				}
			}
			    Either mera match hoga ----> Break
			    Mereko match nhi milega --->
			if matchFound == False:
			    print(array[j])
			    break
		}

a = [9,0,1,1,5,63,5,63,0]

Best case - O(N)
worst case/average case - o(n2)
Space cmple = O(1)


2nd method:* Sorting *

a = [9,0,1,1,5,63,5,63,0]
a.sort()
sorted_a = [0,0,1,1,5,5,9,63,63]
for (int j = 0; j < array.length; j=j+2) {
    if sorted_a[j] != sorted_a[j+1]:
        print(sorted_a[j])
        break
}

Worst sorting - O(nlogn)
In cases where you are using another method, toh apni algorithm ka time complexity would be the max(apni alogo,method)

max(apni alogo,method)
max(O(n), O(nlogn))
N(logn)

inplace sorting ->
not inplace sorting ->

T - O(nlogn)
S - O(1)


Third Method: *Hashing*
{
    key1:value1,
    key2:value2,
    ...
}

a = [9,4,4,0,1,1,5,63,5,63,0]

Defining logic for hashmap:
hash = {
    9:1,
    4:2
    0:2,
    1:2,
    5:2,
    63:2
}
hash[63] -> 2
hash[100] -> None,(Error: Key not found, NULL)


a = [1,1,12,34,56,32,8745,97,6,5635,57]
occurHashmap = {
    1:2
    12:1,
    34:1,
    ...
}
for (int j = 0; j < array.length; j=j+1){  (Entry already h, Entry not find  - toh create kar)
    if entry not found:
    occurHAshmap[
        occurHashmap.insert(key = array[j],value = 1)
    else:
        occurHashmap[key]=occurHashmap[key]+1
}



Solution using Hashmaps
a = [9,4,4,0,1,1,5,63,5,63,0]

hash = {
    9:1,
    4:2
    0:2,
    1:2,
    5:2,
    63:2
}

for (int j = 0, j<dict.length,j=j+1)
    {
        j ki value == 1:
            print(the uniqure is j)
            break
    }

T - 2*O(N) - > O(N)
S - O(N/2) - > O(N)

4th Solution - XOR
T - O(N)
S - O(1)

3XOR9 =
3 ------> 0011--------> 1010 -----> 10
9 ------> 1001

3 XOR 9 = 1010 - 10  -----> 0

0 XOR 8 ===

0 --->0000 -----> 1000
8 ---->1000


5 XOR 5
5 -----> 0101 -------> 0000
5 -----> 0101

a = [3,5,6,5,3]

a = [3,3,5,5,6]


a = [3,5,7,3,7,43,100,43,5]

xor = 0
for (int j = 0; j < array.length; j=j+1)
    xor = xor ^ array[j]
print(xor)

t - O(N)
s - O(1)
